/* 
 * ClickSend v3 REST API
 *
 *  This is the official [ClickSend](https://clicksend.com) SDK.  *You'll need to create a free account to use the API. You can register [here](https://www.clicksend.com/signup).*  You can use our API documentation along with the SDK. Our API docs can be found [here](https://developers.clicksend.com). 
 *
 * OpenAPI spec version: 3.1.0
 * Contact: support@clicksend.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PostDirectMailArea model
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "classType")]
    public partial class PostDirectMailArea :  IEquatable<PostDirectMailArea>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostDirectMailArea" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostDirectMailArea() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostDirectMailArea" /> class.
        /// </summary>
        /// <param name="locationId">Location ID to send to (required).</param>
        /// <param name="quantity">Number of items to send (required).</param>
        public PostDirectMailArea(int? locationId = default(int?), int? quantity = default(int?))
        {
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new InvalidDataException("locationId is a required property for PostDirectMailArea and cannot be null");
            }
            else
            {
                this.LocationId = locationId;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for PostDirectMailArea and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
        }
        
        /// <summary>
        /// Location ID to send to
        /// </summary>
        /// <value>Location ID to send to</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public int? LocationId { get; set; }

        /// <summary>
        /// Number of items to send
        /// </summary>
        /// <value>Number of items to send</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostDirectMailArea {\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostDirectMailArea);
        }

        /// <summary>
        /// Returns true if PostDirectMailArea instances are equal
        /// </summary>
        /// <param name="input">Instance of PostDirectMailArea to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostDirectMailArea input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
